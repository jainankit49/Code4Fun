Merge Intervals:

Given a set of non-overlapping intervals, insert a new interval into the intervals (merge if necessary).

You may assume that the intervals were initially sorted according to their start times.

Example 1:

Given intervals [1,3],[6,9] insert and merge [2,5] would result in [1,5],[6,9].

Example 2:

Given [1,2],[3,5],[6,7],[8,10],[12,16], insert and merge [4,9] would result in [1,2],[3,10],[12,16].

This is because the new interval [4,9] overlaps with [3,5],[6,7],[8,10].

Make sure the returned intervals are also sorted.


Solution:

/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
public class Solution {
    public ArrayList<Interval> insert(ArrayList<Interval> intervals, Interval newInterval) {
            ArrayList<Interval> result = new ArrayList<Interval>();
            for(int i=0;i<intervals.size();i++){
                Interval interval = intervals.get(i);
                if(interval.end < newInterval.start){
                    result.add(interval);
                }
                else if(interval.start > newInterval.end){
                    result.add(newInterval);
                    result.addAll(intervals.subList(i,intervals.size()));
                    return result;
                }
                else{
                    int start = Math.min(interval.start, newInterval.start);
                    int end = Math.max(interval.end, newInterval.end);
                    newInterval.start=start;
                    newInterval.end=end;
                }
            }
                result.add(newInterval);
                return result;
}
}
